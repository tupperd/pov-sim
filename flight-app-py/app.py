from flask import Flask, jsonify
from flasgger import Swagger
from utils import get_random_int

# TRACES INSTRUMENTATION 
#
#
from opentelemetry import trace
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import (
    BatchSpanProcessor,
    ConsoleSpanExporter,
)

provider = TracerProvider()
processor = BatchSpanProcessor(ConsoleSpanExporter())
provider.add_span_processor(processor)

# Sets the global default tracer provider
trace.set_tracer_provider(provider)

# Creates a tracer from the global tracer provider
tracer = trace.get_tracer("flight.app.py.tracer")

# METRICS INSTRUMENTATION
#
#
from opentelemetry import metrics
from opentelemetry.sdk.metrics import MeterProvider
from opentelemetry.sdk.metrics.export import (
    ConsoleMetricExporter,
    PeriodicExportingMetricReader,
)

metric_reader = PeriodicExportingMetricReader(ConsoleMetricExporter())
provider = MeterProvider(metric_readers=[metric_reader])

# Sets the global default meter provider
metrics.set_meter_provider(provider)

# Creates a meter from the global meter provider
meter = metrics.get_meter("flight.app.py.meter")

work_counter = meter.create_counter(
    name="homepagerequests.py", description="Counts amount of requests to /"
)
histogram = meter.create_histogram(
  name="histogram.py", description="Captures random int generated by flights endpoint"
)

app = Flask(__name__)
Swagger(app)

AIRLINES = ["AA", "UA", "DL"]


@app.route("/")
def home():
    """No-op home endpoint
    ---
    responses:
      200:
        description: Returns ok
    """
    # Adding custom span! 
    with tracer.start_as_current_span("davidsCustomSpan") as span:
      print("picked up the span!")
      span.set_attribute("service.name", "flight-app-py")
    
    # Incrementing counter after visiting homepage
    work_counter.add(1, {"service": "flight-app-py"})
    return jsonify({"message": "ok"})


@app.route("/airlines/<err>")
def get_airlines(err=None):
    """Get airlines endpoint. Set err to "raise" to trigger an exception.
    ---
    parameters:
      - name: err
        in: path
        type: string
        enum: ["raise"]
        required: false
    responses:
      200:
        description: Returns a list of airlines
    """
    if err == "raise":
        raise Exception("Raise test exception")
    return jsonify({"airlines": AIRLINES})

@app.route("/flights/<airline>/<err>")
def get_flights(airline, err=None):
    """Get flights endpoint. Set err to "raise" to trigger an exception.
    ---
    parameters:
      - name: airline
        in: path
        type: string
        enum: ["AA", "UA", "DL"]
        required: true
      - name: err
        in: path
        type: string
        enum: ["raise"]
        required: false
    responses:
      200:
        description: Returns a list of flights for the selected airline
    """
    if err == "raise":
        raise Exception("Raise test exception")
    random_int = get_random_int(100, 999)
    # Recording int to histogram 
    histogram.record(random_int, {"service": "flight-app-py"})
    return jsonify({airline: [random_int]})

if __name__ == "__main__":
    app.run(debug=True)
